// Code generated by sqlc. DO NOT EDIT.
// source: order.sql

package db

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    user_id
) VALUES (
    $1
) RETURNING id, user_id, created_at
`

func (q *Queries) CreateOrder(ctx context.Context, userID int64) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder, userID)
	var i Order
	err := row.Scan(&i.ID, &i.UserID, &i.CreatedAt)
	return i, err
}

const getOrder = `-- name: GetOrder :one
SELECT id, user_id, created_at FROM orders
WHERE id = $1
`

func (q *Queries) GetOrder(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i Order
	err := row.Scan(&i.ID, &i.UserID, &i.CreatedAt)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, user_id, created_at FROM orders
WHERE user_id = $1
ORDER BY id
`

func (q *Queries) ListOrders(ctx context.Context, userID int64) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrders, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(&i.ID, &i.UserID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
